"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const Sparky_1 = require("../sparky/Sparky");
;
;
class FuseBoxCLI {
    constructor(settings = {}) {
        this._tasks = {};
        this.optionValues = {};
        if (FuseBoxCLI.initialized) {
            throw new Error("CLI was already initialized! Use .shutdown() first");
        }
        FuseBoxCLI.initialized = true;
        this.initYargs();
        this.initTaskRegisterer();
        this.initRunners();
        this.addOptions(settings.options);
        this.addTaskDescriptions(settings.taskDescriptions);
    }
    addOption(name, option) {
        option["global"] = false;
        this.optionValues[name] = yargs.option(name, option).argv[name];
        return this;
    }
    addOptions(options = {}) {
        Object.keys(options).forEach(name => {
            this.addOption(name, options[name]);
        });
        return this;
    }
    addTaskDescription(name, desc) {
        this._tasks[name] = {
            active: false,
            ...this._tasks[name],
            name,
            desc
        };
        return this;
    }
    addTaskDescriptions(descriptions = {}) {
        Object.keys(descriptions).forEach(name => {
            this.addTaskDescription(name, descriptions[name]);
        });
        return this;
    }
    addTask(name) {
        this._tasks[name] = {
            ...this._tasks[name],
            name,
            active: true
        };
        return this;
    }
    showHelp(exitProcess = false) {
        yargs.getUsageInstance().getCommands().splice(0);
        Object.keys(this._tasks).forEach(name => {
            const task = this._tasks[name];
            if (!task.active)
                return;
            let taskName = task.name;
            let taskDesc = task.desc || "";
            if (task.name === "default") {
                taskName = "\b\b* default\0\0";
                taskDesc = taskDesc || "The default task";
            }
            yargs.command(taskName + "\0", "\b" + taskDesc);
        });
        yargs.showHelp("log");
        if (exitProcess)
            process.exit(0);
        return this;
    }
    run() {
        if (!yargs.argv.help)
            return;
        this.shutDown();
        this.showHelp(true);
        return this;
    }
    parse(argv = process.argv) {
        yargs.parse(argv);
        Object.keys(this.optionValues).forEach(name => {
            this.optionValues[name] = yargs.argv[name];
        });
        return this;
    }
    shutDown() {
        FuseBoxCLI.initialized = false;
        Sparky_1.Sparky.start = Sparky_1.Sparky["$start"] || Sparky_1.Sparky.start;
        Sparky_1.Sparky.task = Sparky_1.Sparky["$task"] || Sparky_1.Sparky.task;
        delete Sparky_1.Sparky["$start"];
        delete Sparky_1.Sparky["$task"];
        process.removeAllListeners("exit");
        return this;
    }
    initYargs() {
        yargs
            .reset()
            .usage("Usage: $0 <task> [options]")
            .updateStrings({ "Commands:": "Tasks:" })
            .help(false)
            .version(false)
            .option("help", {
            alias: "h",
            desc: "Show help",
            type: "boolean",
            global: false
        });
    }
    initRunners() {
        const self = this;
        process.on("exit", () => this.run());
        Sparky_1.Sparky["$start"] = Sparky_1.Sparky.start;
        Sparky_1.Sparky.start = function () {
            self.run();
            return Sparky_1.Sparky["$start"].apply(this, arguments);
        };
    }
    initTaskRegisterer() {
        const self = this;
        Sparky_1.Sparky["$task"] = Sparky_1.Sparky.task;
        Sparky_1.Sparky.task = function (name) {
            self.addTask(name);
            return Sparky_1.Sparky["$task"].apply(this, arguments);
        };
    }
    get tasks() { return this._tasks; }
    get options() { return this.optionValues; }
    get $yargs() { return yargs; }
}
FuseBoxCLI.initialized = false;
exports.FuseBoxCLI = FuseBoxCLI;
function CLI(settings) {
    return new FuseBoxCLI(settings);
}
exports.CLI = CLI;
